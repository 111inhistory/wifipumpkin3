#!/usr/bin/env python3.7
# -*- coding: utf-8 -*-
from logging import getLogger,ERROR
getLogger('scapy.runtime').setLevel(ERROR)
import argparse
import sys
from PyQt5 import QtCore
from wifipumpkin3 import PumpkinShell
from wifipumpkin3.core.utility.printer import banner, setcolor,display_messages
from wifipumpkin3.core.utility.collection import SettingsINI
from wifipumpkin3._version import __version__, __codename__
import wifipumpkin3.core.utility.constants as C

_author  = ('{}'.format(setcolor('@mh4x0f',color='yellow')))
_version = setcolor(__version__,color='yellow')
__codename__ = setcolor(__codename__,color='ciano')
banner(__codename__)

def parser_args_func(parse_args):
    if (parse_args.wireless_mode):
        if (parse_args.wireless_mode in conf.get_all_childname('ap_mode')):
            conf.set_one('ap_mode', parse_args.wireless_mode, True)
            print(display_messages('Wireless Mode: {}'
                .format(setcolor(parse_args.wireless_mode, color='ciano')),info=True))

if __name__ == '__main__':
    app = QtCore.QCoreApplication(sys.argv)
    conf       = SettingsINI(C.CONFIG_INI)
    ifacedefault = conf.get('accesspoint','interfaceAP')
    parser = argparse.ArgumentParser(description="WiFi-Pumpkin - pure line-oriented command")
    parser.add_argument('-i',  dest='interface',help='set interface for create AP',default=ifacedefault)
    parser.add_argument('-s',  dest='session',help='set session for continue attack',default=None)
    parser.add_argument('-p', '--pulp', dest='pulp',help='interactive sessions can be scripted with .pulp file',default='')
    parser.add_argument('-x', '--xpulp', dest='xpulp',help='interactive sessions can be string with ";" as the separator',default='')
    parser.add_argument('-m', '--wireless-mode', dest='wireless_mode',help='set wireless mode settings',default=None)
    parser.add_argument('-v','--version', action='version', dest='version',version='%(prog)s v{}'.format(_version))
    print('Author: {} P0cL4bs Team | {} dev'.format(_author, _version))
    parse_args  = parser.parse_args()

    parser_args_func(parse_args)

    prompt = PumpkinShell(parse_args)
    prompt.cmdloop('Starting prompt...')
    sys.exit(app.exec_())
